/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSssArgs } from "./CreateSssArgs";
import { UpdateSssArgs } from "./UpdateSssArgs";
import { DeleteSssArgs } from "./DeleteSssArgs";
import { SssCountArgs } from "./SssCountArgs";
import { SssFindManyArgs } from "./SssFindManyArgs";
import { SssFindUniqueArgs } from "./SssFindUniqueArgs";
import { Sss } from "./Sss";
import { User } from "../../user/base/User";
import { SssService } from "../sss.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sss)
export class SssResolverBase {
  constructor(
    protected readonly service: SssService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sss",
    action: "read",
    possession: "any",
  })
  async _sssesMeta(
    @graphql.Args() args: SssCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sss])
  @nestAccessControl.UseRoles({
    resource: "Sss",
    action: "read",
    possession: "any",
  })
  async ssses(@graphql.Args() args: SssFindManyArgs): Promise<Sss[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sss, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sss",
    action: "read",
    possession: "own",
  })
  async sss(@graphql.Args() args: SssFindUniqueArgs): Promise<Sss | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sss)
  @nestAccessControl.UseRoles({
    resource: "Sss",
    action: "create",
    possession: "any",
  })
  async createSss(@graphql.Args() args: CreateSssArgs): Promise<Sss> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        uSer: args.data.uSer
          ? {
              connect: args.data.uSer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sss)
  @nestAccessControl.UseRoles({
    resource: "Sss",
    action: "update",
    possession: "any",
  })
  async updateSss(@graphql.Args() args: UpdateSssArgs): Promise<Sss | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          uSer: args.data.uSer
            ? {
                connect: args.data.uSer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sss)
  @nestAccessControl.UseRoles({
    resource: "Sss",
    action: "delete",
    possession: "any",
  })
  async deleteSss(@graphql.Args() args: DeleteSssArgs): Promise<Sss | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "uSer",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUSer(@graphql.Parent() parent: Sss): Promise<User | null> {
    const result = await this.service.getUSer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
